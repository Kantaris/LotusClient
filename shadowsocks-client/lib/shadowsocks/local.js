// Generated by CoffeeScript 1.8.0

/*
  Copyright (c) 2014 clowwindy
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 */

(function() {
  var Encryptor, connections, createServer, fs, inet, net, path, udpRelay, utils;

  net = require("net");

  fs = require("fs");

  path = require("path");

  udpRelay = require("./udprelay");

  utils = require('./utils');

  inet = require('./inet');
  var querystring = require('querystring');
  Encryptor = require("./encrypt").Encryptor;
  var http = require("http");
  var https = require("https");
  process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0"
  connections = 0;
  var serverList = [];
  createServer = function(serverAddr, serverPort, port, key, method, timeout, local_address, user) {
    var getServer, server, udpServer;
    if (local_address == null) {
      local_address = '127.0.0.1';
    }
	var sessid = '';
	var userkey = '';
	
	var currentId = -1;
    var secondId = -1;
    
    var getFastestServer = function(){
    	var i = 0;
    	var low = 100000
    	var low2 = 100000
    	var iid = 0;
    	var iid2 = 0;
    	while(i < serverList.length){
    		if(serverList[i].ping > 0){
    			if(serverList[i].ping < low){
    				low = serverList[i].ping;
    				iid2 = iid;
    				iid  = i;
    			}
    			else if(serverList[i].ping < low2){
    				low2 = serverList[i].ping;
    				iid2 = i;
    			}
    		}
    		
		 	i++;
		}
		if(currentId != iid){
    		currentId = iid;
    		console.log("<title>" + serverList[iid].title + "</title><name>" +
    			 serverList[iid].name + "</name><image>" +
    			 serverList[iid].image + "</image>");
    	}
    	secondId = iid2;
    };
	var makeRequest = function(options, onResult)
	{

    	var prot = options.port == 443 ? https : http;
    		var req = prot.request(options, function(res)
    		{
    			var ret = {
    				server: options.server,
    			};
    			var start = new Date().getTime();
        		var output = '';
        		res.setEncoding('utf8');

        		res.on('data', function (chunk) {
            		output += chunk;
        		});

        		res.on('end', function() {
        			var end = new Date().getTime();
    				ret.server.ping = end - start;

            		onResult(res.statusCode, ret);
        		});
    		});

    		req.on('error', function(err) {
        		//res.send('error: ' + err.message);
    		});

    		req.end();
	};
	var makePostRequest = function(options, onResult)
	{
		
    	var prot = options.port == 443 ? https : http;
    		var req = prot.request(options, function(res)
    		{
    			console.log('Begining post');
        		var output = '';
        		res.setEncoding('utf8');

        		res.on('data', function (chunk) {
            		output += chunk;
        		});

        		res.on('end', function() {
            		onResult(res.statusCode, output);
        		});
    		});

    		req.on('error', function(err) {
        		//res.send('error: ' + err.message);
    		});
			if(options.method.indexOf('POST') > -1){
				console.log('Actual post');
				req.write(options.postdata);
			}

    		req.end();
	};

	
	
    udpServer = udpRelay.createServer(local_address, port, serverAddr, serverPort, key, method, timeout, true);
    getServer = function() {
      var aPort, aServer, r;
      aPort = serverPort;
      aServer = serverAddr;
      if(serverAddr.indexOf('Auto') > -1){
      		getFastestServer();
      		if (serverPort instanceof Array) {
        		aPort = serverPort[Math.floor(Math.random() * serverPort.length)];
      		}
      		if(isRetry == 0){
        		aServer = serverList[currentId].address;
      		}
      		else{
      			aServer = serverList[secondId].address;
      		}
      		if(remoteAddr.indexOf("s.hulu.com") > -1 || remoteAddr.indexOf("theplatform.com") > -1){
      			aServer = "66.212.31.178";
      		}
      		else if(remoteAddr.indexOf("localhost") > -1 || remoteAddr.indexOf("127.0.0.1") > -1 || remoteAddr.indexOf("tudou.com") > -1){
      			aServer = "127.0.0.1";
      			aPort = servPort;
      		}
      	}
      r = /^([^:]*)\:(\d+)$/.exec(aServer);
      if (r != null) {
        aServer = r[1];
        aPort = +r[2];
      }
      return [aServer, aPort];
    };
	var fetchKey = function(sessionId){

		var post_data = querystring.stringify({
			'session_id' : sessionId
		});
    	var xmlHttp = null;
    	var options = {
    		host: 'viprne.com',
    		port: 443,	
    		path: '/api/Key/GetOpenWebKeyClient',
    		method: 'POST',
			postdata: post_data,
    		headers: {
					'Content-Type': 'application/x-www-form-urlencoded',
					'Content-Length': post_data.length
    		}
		};
		
		console.log("Starting post");
		makePostRequest(options,
        function(statusCode, result)
        {
            // I could work with the result html/json here.  I could also just return it
            //console.log(result);
			if(result.indexOf('<key>') > -1){
				result = result.substring(result.indexOf('<key>') + 5);
				result = result.substring(0, result.indexOf('</key>'));
			}
            //checkServers();
            //res.statusCode = statusCode;
            //res.send(result);
			userkey = result;
			console.log("Set key " + userkey );
        });
    	

    };
	var loginCheck = function(uname, passhash){
		var post_data = querystring.stringify({
			'username' : uname,
			'password' : passhash
		});
    	var xmlHttp = null;
    	var options = {
    		host: '157.7.234.46',
    		port: 443,	
    		path: '/api/User/Login',
    		method: 'POST',
			postdata: post_data,
    		headers: {
					'Content-Type': 'application/x-www-form-urlencoded',
					'Content-Length': post_data.length
    		}
		};
		
		console.log("Starting post");
		makePostRequest(options,
        function(statusCode, result)
        {
			var ressid = '';
			var reskey = '';
            // I could work with the result html/json here.  I could also just return it
            //console.log(result);
			if(result.indexOf('<session_id>') > -1){
				ressid = result.substring(result.indexOf('<session_id>') + 12);
				ressid = ressid.substring(0, ressid.indexOf('</session_id>'));
			}
			if(result.indexOf('<key>') > -1){
				reskey = result.substring(result.indexOf('<key>') + 5);
				reskey = reskey.substring(0, reskey.indexOf('</key>'));
			}
			while(result.indexOf('<server>') > -1){
				sserver = { title: '', address: '', name: '', port: '', password: '', country: '', continent: '', hulu: '', image: '', ping: 0 };
				var parseString = result.substring(result.indexOf('<title>') + 7);
				parseString = parseString.substring(0, parseString.indexOf('</title>'));
				sserver.title = parseString;
				parseString = result.substring(result.indexOf('<name>') + 6);
				parseString = parseString.substring(0, parseString.indexOf('</name>'));
				sserver.name = parseString;
				parseString = result.substring(result.indexOf('<address>') + 9);
				parseString = parseString.substring(0, parseString.indexOf('</address>'));
				sserver.address = parseString;
				parseString = result.substring(result.indexOf('<port>') + 6);
				parseString = parseString.substring(0, parseString.indexOf('</port>'));
				sserver.port = parseString;
				parseString = result.substring(result.indexOf('<password>') + 10);
				parseString = parseString.substring(0, parseString.indexOf('</password>'));
				sserver.password = parseString;
				parseString = result.substring(result.indexOf('<country>') + 9);
				parseString = parseString.substring(0, parseString.indexOf('</country>'));
				sserver.country = parseString;
				parseString = result.substring(result.indexOf('<continent>') + 11);
				parseString = parseString.substring(0, parseString.indexOf('</continent>'));
				sserver.continent = parseString;
				parseString = result.substring(result.indexOf('<hulu>') + 6);
				parseString = parseString.substring(0, parseString.indexOf('</hulu>'));
				sserver.hulu = parseString;
				parseString = result.substring(result.indexOf('<image>') + 7);
				parseString = parseString.substring(0, parseString.indexOf('</image>'));
				sserver.image = parseString;
				serverList.push(sserver);
				result = result.substring(result.indexOf('</server>') + 9);
			}
			
            checkServers();
            //res.statusCode = statusCode;
            //res.send(result);
			sessid = ressid;
			userkey = reskey; 
			console.log("SessionID " + reskey + " Server count " + serverList.length );
			//fetchKey(result);
        });
	}
	var first = 0;
	pingServer = function(serverItem){

		
    	var xmlHttp = null;
    	var options = {
    		host: serverItem.address,
    		server: serverItem,
    		port: 80,
    		path: '/index.php',
    		method: 'GET',
    		headers: {
        		'Content-Type': 'application/html'
    		}
		};
		makeRequest(options,
        function(statusCode, result)
        {
            // I could work with the result html/json here.  I could also just return it
            console.log("" + result.server.name + " " + result.server.ping);
                    if(first == 0){
                    first = 1;
                    console.log("<title>" + result.server.title + "</title><name>" +
                                result.server.name + "</name><image>" + 
                                result.server.image + "</image>");
                    }
            //res.statusCode = statusCode;
            //res.send(result);
        });
    	

    };
    checkServers = function(){

		var i = 0;
		while(i < serverList.length){
		 	pingServer(serverList[i]);
		 	//console.log("Pinging: " + serverList[i].name + " " + time);
		 	i++;
		};

    }
	loginCheck(user, key);
	setInterval(function(){checkServers();}, 5 * 60 * 1000);
	setInterval(function(){loginCheck(user, key);}, 30 * 60 * 1000);
    server = net.createServer(function(connection) {
      var addrLen, addrToSend, clean, connected, encryptor, headerLength, remote, remoteAddr, remotePort, stage;
      connections += 1;
      connected = true;
      encryptor = new Encryptor(userkey, method);
      stage = 0;
      headerLength = 0;
      remote = null;
      addrLen = 0;
      remoteAddr = null;
      remotePort = null;
      addrToSend = "";
      utils.debug("connections: " + connections);
      clean = function() {
        utils.debug("clean");
        connections -= 1;
        remote = null;
        connection = null;
        encryptor = null;
        return utils.debug("connections: " + connections);
      };
	
	
      connection.on("data", function(data) {
        var aPort, aServer, addrToSendBuf, addrtype, buf, cmd, e, piece, reply, tempBuf, _ref;
        utils.log(utils.EVERYTHING, "connection on data");
        if (stage === 5) {
			
          data = encryptor.encrypt(data);
		 // var buffer1 = new Buffer('<testtest>', 'ascii');
		 // data = Buffer.concat([buffer1, new Buffer(data)]);
		  //data = '<testtest>' + data;
          if (!remote.write(data)) {
            connection.pause();
          }
          return;
        }
        if (stage === 0) {
          tempBuf = new Buffer(2);
          tempBuf.write("\u0005\u0000", 0);
          connection.write(tempBuf);
          stage = 1;
          utils.debug("stage = 1");
          return;
        }
        if (stage === 1) {
          try {
            cmd = data[1];
            addrtype = data[3];
            if (cmd === 1) {

            } else if (cmd === 3) {
              utils.info("UDP assc request from " + connection.localAddress + ":" + connection.localPort);
              reply = new Buffer(10);
              reply.write("\u0005\u0000\u0000\u0001", 0, 4, "binary");
              utils.debug(connection.localAddress);
              utils.inetAton(connection.localAddress).copy(reply, 4);
              reply.writeUInt16BE(connection.localPort, 8);
              connection.write(reply);
              stage = 10;
            } else {
              utils.error("unsupported cmd: " + cmd);
              reply = new Buffer("\u0005\u0007\u0000\u0001", "binary");
              connection.end(reply);
              return;
            }
            if (addrtype === 3) {
              addrLen = data[4];
            } else if (addrtype !== 1 && addrtype !== 4) {
              utils.error("unsupported addrtype: " + addrtype);
              connection.destroy();
              return;
            }
            addrToSend = data.slice(3, 4).toString("binary");
            if (addrtype === 1) {
              remoteAddr = utils.inetNtoa(data.slice(4, 8));
              addrToSend += data.slice(4, 10).toString("binary");
              remotePort = data.readUInt16BE(8);
              headerLength = 10;
            } else if (addrtype === 4) {
              remoteAddr = inet.inet_ntop(data.slice(4, 20));
              addrToSend += data.slice(4, 22).toString("binary");
              remotePort = data.readUInt16BE(20);
              headerLength = 22;
            } else {
              remoteAddr = data.slice(5, 5 + addrLen).toString("binary");
              addrToSend += data.slice(4, 5 + addrLen + 2).toString("binary");
              remotePort = data.readUInt16BE(5 + addrLen);
              headerLength = 5 + addrLen + 2;
            }
            if (cmd === 3) {
              utils.info("UDP assc: " + remoteAddr + ":" + remotePort);
              return;
            }
            buf = new Buffer(10);
            buf.write("\u0005\u0000\u0000\u0001", 0, 4, "binary");
            buf.write("\u0000\u0000\u0000\u0000", 4, 4, "binary");
            buf.writeInt16BE(2222, 8);
            connection.write(buf);
            _ref = getServer(), aServer = _ref[0], aPort = _ref[1];
            utils.info("connecting " + aServer + ":" + aPort);
            remote = net.connect(aPort, aServer, function() {
              if (remote) {
                remote.setNoDelay(true);
              }
              stage = 5;
              return utils.debug("stage = 5");
            });
            remote.on("data", function(data) {
              var e;
              if (!connected) {
                return;
              }
              utils.log(utils.EVERYTHING, "remote on data");
              try {
                if (encryptor) {
                  data = encryptor.decrypt(data);
				 
                  if (!connection.write(data)) {
                    return remote.pause();
                  }
                } else {
                  return remote.destroy();
                }
              } catch (_error) {
                e = _error;
                utils.error(e);
                if (remote) {
                  remote.destroy();
                }
                if (connection) {
                  return connection.destroy();
                }
              }
            });
            remote.on("end", function() {
              utils.debug("remote on end");
              if (connection) {
                return connection.end();
              }
            });
            remote.on("error", function(e) {
              utils.debug("remote on error");
              return utils.error("remote " + remoteAddr + ":" + remotePort + " error: " + e);
            });
            remote.on("close", function(had_error) {
              utils.debug("remote on close:" + had_error);
              if (had_error) {
                if (connection) {
                  return connection.destroy();
                }
              } else {
                if (connection) {
                  return connection.end();
                }
              }
            });
            remote.on("drain", function() {
              utils.debug("remote on drain");
              if (connection) {
                return connection.resume();
              }
            });
            remote.setTimeout(timeout, function() {
              utils.debug("remote on timeout");
              if (remote) {
                remote.destroy();
              }
              if (connection) {
                return connection.destroy();
              }
            });
            addrToSendBuf = new Buffer(addrToSend, "binary");
            addrToSendBuf = encryptor.encrypt(addrToSendBuf);
			var buffer1 = new Buffer('<keykey>' + sessid, 'ascii');
			addrToSendBuf = Buffer.concat([buffer1, addrToSendBuf]);
			//addrToSendBuf = '<testtest>' + addrToSendBuf;
            remote.setNoDelay(false);
            remote.write(addrToSendBuf);
            if (data.length > headerLength) {
              buf = new Buffer(data.length - headerLength);
              data.copy(buf, 0, headerLength);
              piece = encryptor.encrypt(buf);
              remote.write(piece);
            }
            stage = 4;
            return utils.debug("stage = 4");
          } catch (_error) {
            e = _error;
            utils.error(e);
            if (connection) {
              connection.destroy();
            }
            if (remote) {
              remote.destroy();
            }
            return clean();
          }
        } else if (stage === 4) {
          if (remote == null) {
            if (connection) {
              connection.destroy();
            }
            return;
          }
          data = encryptor.encrypt(data);
		  //var buffer1 = new Buffer('<testtest>', 'ascii');
		 // data = Buffer.concat([buffer1, new Buffer(data)]);
			//data = '<testtest>' + data;
          remote.setNoDelay(true);
          if (!remote.write(data)) {
            return connection.pause();
          }
        }
      });
      connection.on("end", function() {
        connected = false;
        utils.debug("connection on end");
        if (remote) {
          return remote.end();
        }
      });
      connection.on("error", function(e) {
        utils.debug("connection on error");
        return utils.error("local error: " + e);
      });
      connection.on("close", function(had_error) {
        connected = false;
        utils.debug("connection on close:" + had_error);
        if (had_error) {
          if (remote) {
            remote.destroy();
          }
        } else {
          if (remote) {
            remote.end();
          }
        }
        return clean();
      });
      connection.on("drain", function() {
        utils.debug("connection on drain");
        if (remote && stage === 5) {
          return remote.resume();
        }
      });
      return connection.setTimeout(timeout, function() {
        utils.debug("connection on timeout");
        if (remote) {
          remote.destroy();
        }
        if (connection) {
          return connection.destroy();
        }
      });
    });
    if (local_address != null) {
      server.listen(port, local_address, function() {
        return utils.info("local listening at " + (server.address().address) + ":" + port);
      });
    } else {
      server.listen(port, function() {
        return utils.info("local listening at 0.0.0.0:" + port);
      });
    }
    server.on("error", function(e) {
      if (e.code === "EADDRINUSE") {
        return utils.error("Address in use, aborting");
      } else {
        return utils.error(e);
      }
    });
    server.on("close", function() {
      return udpServer.close();
    });
    return server;
  };

  exports.createServer = createServer;

  exports.main = function() {
    var KEY, METHOD, PORT, REMOTE_PORT, SERVER, config, configContent, configFromArgs, configPath, e, k, local_address, s, timeout, v;
    console.log(utils.version);
    configFromArgs = utils.parseArgs();
    configPath = 'config.json';
    if (configFromArgs.config_file) {
      configPath = configFromArgs.config_file;
    }
    if (!fs.existsSync(configPath)) {
      configPath = path.resolve(__dirname, "config.json");
      if (!fs.existsSync(configPath)) {
        configPath = path.resolve(__dirname, "../../config.json");
        if (!fs.existsSync(configPath)) {
          configPath = null;
        }
      }
    }
    if (configPath) {
      utils.info('loading config from ' + configPath);
      configContent = fs.readFileSync(configPath);
      try {
        config = JSON.parse(configContent);
      } catch (_error) {
        e = _error;
        utils.error('found an error in config.json: ' + e.message);
        process.exit(1);
      }
    } else {
      config = {};
    }
    for (k in configFromArgs) {
      v = configFromArgs[k];
      config[k] = v;
    }
    if (config.verbose) {
      utils.config(utils.DEBUG);
    }
    utils.checkConfig(config);
    SERVER = config.server;
    REMOTE_PORT = config.server_port;
    PORT = config.local_port;
    KEY = config.password;
    METHOD = config.method;
	USERNAME = config.username;
    local_address = config.local_address;
    if (!(SERVER && REMOTE_PORT && PORT && KEY)) {
      utils.warn('config.json not found, you have to specify all config in commandline');
      process.exit(1);
    }
    timeout = Math.floor(config.timeout * 1000) || 600000;
    s = createServer(SERVER, REMOTE_PORT, PORT, KEY, METHOD, timeout, local_address, USERNAME);
    return s.on("error", function(e) {
      return process.stdout.on('drain', function() {
        return process.exit(1);
      });
    });
  };

  if (require.main === module) {
    exports.main();
  }

}).call(this);
